{"version":3,"sources":["webpack:///./src/libs/http-config.js","webpack:///./src/libs/utils.js","webpack:///./src/libs/validateRules.js","webpack:///./src/locale/lang/readLanguage.js","webpack:///./src/locale/lang/zh-CN.js","webpack:///./src/locale/lang/en-US.js","webpack:///./src/locale/index.js"],"names":["devBaseUrl","CONFIG","testBaseUrl","proBaseUrl","baseURL","process","hasAuth","code","authCode","window","localStorage","getItem","match","reRender","vm","store","dispatch","i18n","locale","state","language","telephone","pattern","message","t","trigger","phone","email","chinese","english","number","type","positiveInteger","englishNumber","decimal","index","minMultipleChoice","required","maxMultipleChoice","max","select","idCard","lang","lanArr","Object","keys","map","item","result","forEach","assign","rules","telephoneRule","phoneRule","emailRule","chineseRule","englishRule","numberRule","positiveIntegerRule","englishNumberRule","decimalRule","selectRule","enterRule","tickRule","mostTickRule","idCardRule","common","logout","noData","addBtn","operate","valid","invalid","view","detail","edit","status","detailBtn","searchBtn","reset","save","del","deleteConfirm","cancel","ok","modalTile","cannotEmpty","cannotUse","systemHint","saveFailed","saveSuccess","serail","choose","moreThanOne","tooLength","mustNum","checkForm","tipsImageFormat","tipsImageSize","yes","no","more","test","readLanguage","zh","tipsImage","length","width","height","weight","en","Vue","use","VueI18n","messages","zhCN","enUS"],"mappings":"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","file":"js/app~751cc44f.d9db64c9.js","sourcesContent":["/* eslint-disable */\r\n// let devBaseUrl = process.env.NODE_ENV === 'development' ?  API_BASE ? API_BASE : 'http://192.168.1.36:8090/api/' : ''\r\nlet devBaseUrl = ''\r\n/* eslint-enable */\r\n\r\nconst CONFIG = {\r\n    testBaseUrl: '/api/',\r\n    devBaseUrl: devBaseUrl,\r\n    proBaseUrl: '/api/'\r\n}\r\n\r\nlet baseURL = ''\r\nswitch (process.env.NODE_ENV) {\r\ncase 'production':\r\n    baseURL = CONFIG.proBaseUrl\r\n    break\r\ncase 'testing':\r\n    baseURL = CONFIG.testBaseUrl\r\n    break\r\ncase 'development':\r\n    baseURL = CONFIG.devBaseUrl\r\n    break\r\ndefault:\r\n    baseURL = CONFIG.devBaseUrl\r\n}\r\n\r\nexport default baseURL\r\n","import { Message } from 'view-design'\r\nimport validateRules from './validateRules'\r\nimport store from '../store/index.js'\r\n\r\n/**\r\n * @param {Object} data: 字典里取出来的数据\r\n * @description 根据字典数据里的rules字段生成校验规则\r\n * @return {Object}\r\n */\r\nexport const getRules = (data) => {\r\n    const tempRules = []\r\n    // 当不需要校验的时候，返回一个空的校验规则（这里会默认检验必须是string），不然不会触发表单的on-validate事件\r\n    if (!data.rules.length) {\r\n        return [{}]\r\n    }\r\n    for (const rule of data.rules) {\r\n        // iView如果是必填校验，必填校验必须放到校验数组的第一个，不然页面上不显示必填的*标记（原因不明）\r\n        if (rule === 'required') {\r\n            tempRules.unshift(...validateRules[rule](data.label))\r\n        } else {\r\n            tempRules.push(...validateRules[rule](data.label))\r\n        }\r\n    }\r\n    return tempRules\r\n}\r\n\r\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\r\nexport const objEqual = (obj1, obj2) => {\r\n    const keysArr1 = Object.keys(obj1)\r\n    const keysArr2 = Object.keys(obj2)\r\n    if (keysArr1.length !== keysArr2.length) return false\r\n    else if (keysArr1.length === 0 && keysArr2.length === 0) return true\r\n    /* eslint-disable-next-line */\r\n    else return !keysArr1.some(key => obj1[key] != obj2[key])\r\n}\r\n\r\n/**\r\n * @param {Number/String} IDCard\r\n * @description 判断身份证号码是否符合规范 (身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X)\r\n * @return {Boolean}\r\n */\r\nexport const IDCard = (IDCard) => {\r\n    const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/\r\n    return reg.test(IDCard)\r\n}\r\n\r\n/**\r\n * @param {Number/String} phone\r\n * @description 判断判断电话号码\r\n * @return {Boolean}\r\n */\r\nexport const mobilePhone = (phone) => {\r\n    const reg = /^1[345678]\\d{9}$/\r\n    return reg.test(phone)\r\n}\r\n\r\n/**\r\n * @param {arr1,code} 合并后数组，判断去重属性<字符串>\r\n * @description 数组对象去重\r\n * @return newArr  去重后数组对象\r\n * 自查找数组第一层对象\r\n */\r\nexport const duplicateRemove = (arr, code) => {\r\n    let newArr = []\r\n    var obj = {}\r\n    newArr = arr.reduce((item, next) => {\r\n        if (!obj[next[code]]) {\r\n            obj[next[code]] = true\r\n            item.push(next)\r\n        }\r\n        return item\r\n    }, [])\r\n    return newArr\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return window.localStorage.getItem('accessToken')\r\n}\r\n\r\nexport const getRefreshToken = () => {\r\n    return window.localStorage.getItem('refreshToken')\r\n}\r\n\r\n/**\r\n * @param {String} code: 当前权限编码\r\n * @description 判断用户是否拥有某功能或某子菜单权限\r\n * @return {Boolean}\r\n */\r\nexport const hasAuth = (code) => {\r\n    const authCode = window.localStorage.getItem('authCode') || ''\r\n    return !!authCode.match(code)\r\n}\r\n\r\n/*\r\n *@description 清空数据，重新渲染\r\n */\r\nexport const reRender = (vm) => {\r\n    store.dispatch('reRender')\r\n}\r\n\r\n/*\r\n * @param arr {Array} 必填项\r\n * @description 验证必填项是否全，不全则提示\r\n * @return {Boolean}\r\n */\r\nexport const isInfoComplete = (arr) => {\r\n    return arr.every(item => {\r\n        if (item === '' || item === undefined) {\r\n            Message.info({\r\n                content: '请补全必填项信息',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }\r\n        return item !== '' && item !== undefined\r\n    })\r\n}\r\n\r\n/*\r\n * @param arr {date}  毫秒数\r\n * @description 将毫秒数的时间转换为如：2018-09-03这种格式\r\n * @return {date}\r\n */\r\nexport const dateToString = (date) => {\r\n    if (date) {\r\n        var time = new Date(date)\r\n        time = time.getFullYear() + '-' + (time.getMonth() + 1) + '-' + time.getDate()\r\n        return time\r\n    }\r\n}\r\n\r\n/*\r\n * @param arr {date}  毫秒数\r\n * @description 将毫秒数的时间转换为如：2018-09-03 12:00这种格式\r\n * @return {date}\r\n */\r\nexport const timestampFormat = (date) => {\r\n    if (date) {\r\n        let time = new Date(date)\r\n        const year = time.getFullYear()\r\n        const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${time.getMonth() + 1}`\r\n        const day = time.getDate() > 9 ? time.getDate() : `0${time.getDate()}`\r\n        const hour = time.getHours() > 9 ? time.getHours() : `0${time.getHours()}`\r\n        const min = time.getMinutes() > 9 ? time.getMinutes() : `0${time.getMinutes()}`\r\n        time = `${year}-${month}-${day} ${hour}:${min}`\r\n        return time\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 2018-09-03 12:00\r\n * @description 将如：2018-09-03 12:00这种格式转换为毫秒数\r\n * @return {date}\r\n */\r\nexport const toTimestamp = (date) => {\r\n    if (date) {\r\n        const time = new Date(date)\r\n        return time.getTime()\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 21355\r\n * @description 将如：44820分钟转换为31天3小时\r\n * @return {date}\r\n */\r\nexport const toHoursStamp = (StatusMinute) => {\r\n    StatusMinute = parseFloat(StatusMinute)\r\n    const day = parseInt(StatusMinute / 60 / 24)\r\n    const hour = parseInt(StatusMinute / 60 % 24)\r\n    const min = parseInt(StatusMinute % 60)\r\n    StatusMinute = ''\r\n    if (day > 0) {\r\n        StatusMinute += day + '天'\r\n    }\r\n    if (hour > 0) {\r\n        StatusMinute += hour + '小时'\r\n    }\r\n    if (min > 0) {\r\n        StatusMinute += parseFloat(min) + '分钟'\r\n    }\r\n    return StatusMinute\r\n}\r\n\r\nexport const dateTimeToString = (dateTime) => {\r\n    if (dateTime) {\r\n        const temp = dateTime.split('T')\r\n        return `${temp[0]} ${temp[1].slice(0, 8)}`\r\n    }\r\n}\r\n\r\nexport const checkSelect = (vm) => {\r\n    if (!~vm.selectRadioIndex) {\r\n        Message.error({\r\n            content: '需选中下列表格中的某一项',\r\n            duration: 1.2,\r\n            closable: true\r\n        })\r\n    }\r\n    return ~vm.selectRadioIndex\r\n}\r\n\r\n/*\r\n * @param tableData {Array}  后台传来的数据\r\n * @param consts {Array}  前台定义的常量\r\n * @param changeDate {String}  需要转换的字段\r\n * @description 将后台传来的没有翻译的字段翻译成字符串 在原有字段添加一个Name\r\n * @return {Array}\r\n */\r\nexport const conversionConsts = (tableData, consts, changeDate) => {\r\n    for (let i = 0, length1 = tableData.length; i < length1; i++) {\r\n        for (let j = 0, length2 = consts.length; j < length2; j++) {\r\n            if (tableData[i][changeDate] === consts[j].value) {\r\n                const name = changeDate + 'Name'\r\n                tableData[i][name] = consts[j].label\r\n            }\r\n        }\r\n    }\r\n    return tableData\r\n}\r\n\r\n/*\r\n * @param tableData {Array}  表格显示的数据\r\n * @description 将后台传来的含有null的字段转化为空\r\n * @return {Array}\r\n */\r\nexport const deleteNull = (tableData) => {\r\n    tableData.forEach(item => {\r\n        for (var key in item) {\r\n            if (!item[key]) {\r\n                item[key] = ''\r\n            }\r\n        }\r\n    })\r\n    return tableData\r\n}\r\n\r\n/*\r\n * @param start/end {Date}\r\n * @description 检测是否end大于start\r\n * @return {Boolean}\r\n */\r\nexport const checkTimeRange = (start, end, msg) => {\r\n    if (start && end) {\r\n        const result = new Date(start).getTime() < new Date(end).getTime()\r\n        if (!result) {\r\n            Message.error({\r\n                content: msg || '时间范围有误请修改',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }\r\n        return result\r\n    } else {\r\n        Message.error({\r\n            content: '请选择时间',\r\n            duration: 1.2,\r\n            closable: true\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\r\nexport const routeEqual = (route1, route2) => {\r\n    const params1 = route1.params || {}\r\n    const params2 = route2.params || {}\r\n    const query1 = route1.query || {}\r\n    const query2 = route2.query || {}\r\n    return (route1.name === route2.name) && objEqual(params1, params2) && objEqual(query1, query2)\r\n}\r\n\r\n/**\r\n * @param {Array} list 标签列表\r\n * @param {String} name 当前关闭的标签的name\r\n */\r\nexport const getNextRoute = (list, route) => {\r\n    let res = {}\r\n    if (list.length === 2) {\r\n        res = getHomeRoute(list)\r\n    } else {\r\n        const index = list.findIndex(item => routeEqual(item, route))\r\n        if (index === list.length - 1) res = list[list.length - 2]\r\n        else res = list[index + 1]\r\n    }\r\n    return res\r\n}\r\n\r\n/**\r\n * @param {Array} routers 路由列表数组\r\n * @description 用于找到路由列表中name为home的对象\r\n */\r\nexport const getHomeRoute = (routers, homeName = 'home') => {\r\n    let i = -1\r\n    const len = routers.length\r\n    let homeRoute = {}\r\n    while (++i < len) {\r\n        const item = routers[i]\r\n        if (item.children && item.children.length) {\r\n            const res = getHomeRoute(item.children, homeName)\r\n            if (res.name) return res\r\n        } else {\r\n            if (item.name === homeName) homeRoute = item\r\n        }\r\n    }\r\n    return homeRoute\r\n}\r\n\r\n/**\r\n * 读取中英文语言文字\r\n */\r\nexport const readLanguage = (language, type) => {\r\n    const lang = {}\r\n    const lanArr = Object.keys(language).map(item => {\r\n        const result = {}\r\n        result[item] = language[item][type]\r\n        return result\r\n    })\r\n    lanArr.forEach(item => {\r\n        Object.assign(lang, item)\r\n    })\r\n    return lang\r\n}\r\n\r\nexport const trim = function (string) {\r\n    return (string || '').replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '')\r\n}\r\n\r\n/*\r\n * @description 获取存储在localStorage中的某对象的某字段\r\n * @param: objName {String} 对象名\r\n * @param: key {String} 字段名\r\n * @return value\r\n * example: getStorageInfo('enterprise', 'enterpriseLicense')\r\n */\r\nexport function getStorageInfo (objName, key) {\r\n    let obj = window.localStorage.getItem(objName)\r\n    if (obj) {\r\n        obj = JSON.parse(obj)\r\n        return obj[key]\r\n    }\r\n}\r\n\r\n/*\r\n * @description 合并图片（如果同一个imageType则合并）\r\n * @param: containerGood {Array} 原始图片混合的数据 [{imageType: xxx, imageList: xxx, id: xxx}, {}]\r\n * @return {Array} 合并后的格式如下\r\n * [\r\n *     {\r\n *          imageType: xxx,\r\n *          imageList: [\r\n *              {imageUrl: xx, ...},\r\n *              {imageUrl: xx, ...}\r\n *          ]\r\n *      },\r\n *      {\r\n *          ...\r\n *      }\r\n * ]\r\n */\r\nexport function mergeImg (imgList) {\r\n    const map = {}\r\n    const result = []\r\n    imgList.forEach(item => {\r\n        if (!map[item.imageType]) {\r\n            map[item.imageType] = item.imageType\r\n            result.push({\r\n                imageTypeI18nDisplay: item.imageTypeI18nDisplay,\r\n                imageType: item.imageType,\r\n                imageList: [item]\r\n            })\r\n        } else {\r\n            result.forEach(r => {\r\n                if (r.imageType === item.imageType) {\r\n                    r.imageList.push(item)\r\n                }\r\n            })\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\n/*\r\n * @description 合并图片（将页面上全部图片合并成一个imageList）\r\n * @param: imageUrls {Array}, imageType: {String} 第一个为图片组件的url，第二个为字典的类型, 第三个为imageResourceId,没有则传false。可传多个这样的组合 arrangeImg(imageUrls, imageType, imageResourceId, imageUrls, imageType, imageResourceId, ...)\r\n * @return {Array} 合并后的格式如下\r\n * [\r\n *     {\r\n *          imageResourceId,\r\n *          imageType: xxx,\r\n *          imageUrls: [\r\n *              'http:....',\r\n *              'http:....'\r\n *          ]\r\n *      },\r\n *      {\r\n *          ...\r\n *      }\r\n * ]\r\n */\r\nexport function arrangeImg () {\r\n    const imageList = []\r\n    if (!(arguments.length % 3 === 0)) {\r\n        throw new Error('传入参数有误，参数个数应为3的倍数')\r\n    } else {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (i % 3 === 0) {\r\n                //  照片地址\r\n                const imgObj = {\r\n                    imageType: arguments[i + 1]\r\n                }\r\n                let tempImgUrls = []\r\n                if (arguments[i] && arguments[i].length > 0) {\r\n                    if (arguments[i + 2]) {\r\n                        imgObj.imageResourceId = arguments[i + 2]\r\n                    }\r\n                    arguments[i].forEach(item => {\r\n                        item.imageUrl ? tempImgUrls.push(item.imageUrl) : tempImgUrls = item.imageUrls\r\n                    })\r\n                }\r\n                imgObj.imageUrls = tempImgUrls\r\n                imageList.push(imgObj)\r\n            }\r\n        }\r\n        return imageList\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 传入分钟为单位的时间间隔 如63分钟\r\n * @description 将如：63转化为1小时3分钟\r\n * @return {date} 1小时3分钟\r\n */\r\nexport const minuteToHour = (date) => {\r\n    if (date) {\r\n        return Math.floor(date / 60) + '时' + date % 60 + '分'\r\n    }\r\n}\r\n","import i18n from '@/locale'\r\nimport store from '../store'\r\n\r\n// 该js文件会先于main.js执行\r\ni18n.locale = store.state.language\r\n\r\nexport default {\r\n    telephone () {\r\n        return [\r\n            { pattern: /^(\\d{3,4}-)\\d{7,8}$/, message: i18n.t('rules.telephoneRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    phone () {\r\n        return [\r\n            { pattern: /^1([38][0-9]|4[5-9]|5[0-3,5-9]|66|7[0-8]|9[89])[0-9]{8}$/, message: i18n.t('rules.phoneRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    email () {\r\n        return [\r\n            { pattern: /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, message: i18n.t('rules.emailRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    chinese () {\r\n        return [\r\n            { pattern: /^[\\u4e00-\\u9fa5]{2,4}$/, message: i18n.t('rules.chineseRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    english () {\r\n        return [\r\n            { pattern: /^[A-Za-z]+$/, message: i18n.t('rules.englishRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    number () {\r\n        return [\r\n            { type: 'number', message: i18n.t('rules.numberRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    positiveInteger () {\r\n        return [\r\n            { pattern: /^\\+?[1-9][0-9]*$/, message: i18n.t('rules.positiveIntegerRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    englishNumber () {\r\n        return [\r\n            { pattern: /^[A-Za-z0-9]+$/, message: i18n.t('rules.englishNumberRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    decimal (index) {\r\n        return [\r\n            { pattern: /^(([1-9]{1}\\d*)|(0{1}))(\\.\\d{2})$/, message: i18n.t('rules.decimalRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    minMultipleChoice (type) {\r\n        return [\r\n            { required: true, type: 'array', message: `${i18n.t('rules.tickRule')}${type}`, trigger: 'change' }\r\n        ]\r\n    },\r\n    maxMultipleChoice (type, index) {\r\n        return [\r\n            { type: 'array', max: index, message: `${i18n.t('rules.mostTickRule')}${index}个${type}`, trigger: 'change' }\r\n        ]\r\n    },\r\n    select (type) {\r\n        return [\r\n            { required: true, message: `${i18n.t('rules.selectRule')}${type}`, trigger: 'blur' }\r\n        ]\r\n    },\r\n    idCard () {\r\n        return [\r\n            { pattern: /^\\d{17}(\\d|X|x)/, message: i18n.t('rules.idCardRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    required (type) {\r\n        return [\r\n            { required: true, message: `${i18n.t('rules.enterRule')}${type}`, trigger: 'blur' }\r\n        ]\r\n    }\r\n}\r\n","/**\r\n * 读取中英文语言文字\r\n */\r\nexport default (language, type) => {\r\n    const lang = {}\r\n    const lanArr = Object.keys(language).map(item => {\r\n        const result = {}\r\n        result[item] = language[item][type]\r\n        return result\r\n    })\r\n    lanArr.forEach(item => {\r\n        Object.assign(lang, item)\r\n    })\r\n    return lang\r\n}\r\n","import test from '@/pages/test/language'\r\nimport readLanguage from './readLanguage'\r\n// iview国际化\r\nimport zh from 'view-design/dist/locale/zh-CN'\r\n\r\nexport default {\r\n    ...{\r\n        rules: {\r\n            telephoneRule: '请输入正确的电话号码',\r\n            phoneRule: '请输入正确的手机号码',\r\n            emailRule: '请输入正确的邮箱号',\r\n            chineseRule: '请输入中文',\r\n            englishRule: '请输入英文字母',\r\n            numberRule: '请输入数字',\r\n            positiveIntegerRule: '请输入正整数',\r\n            englishNumberRule: '请输入英文或者数字',\r\n            decimalRule: '请保留两位有效数字',\r\n            selectRule: '请选择',\r\n            enterRule: '请输入',\r\n            tickRule: '请勾选',\r\n            mostTickRule: '最多勾选',\r\n            idCardRule: '请输入正确的身份证号码'\r\n        },\r\n        common: {\r\n            logout: '注销',\r\n            noData: '暂无数据',\r\n            addBtn: '新增',\r\n            operate: '操作',\r\n            valid: '有效',\r\n            invalid: '无效',\r\n            view: '查看',\r\n            detail: '详情',\r\n            edit: '编辑',\r\n            status: '状态',\r\n            detailBtn: '详细描述',\r\n            searchBtn: '搜索',\r\n            reset: '重置',\r\n            save: '保存',\r\n            del: '删除',\r\n            deleteConfirm: '确认删除',\r\n            cancel: '取消',\r\n            ok: '确定',\r\n            modalTile: '请填写',\r\n            cannotEmpty: '信息不能为空',\r\n            cannotUse: '信息无效',\r\n            systemHint: '系统提示',\r\n            saveFailed: '保存失败 ...',\r\n            saveSuccess: '保存成功',\r\n            serail: '序号',\r\n            choose: '选择',\r\n            moreThanOne: '至少选择一项',\r\n            tooLength: '长度过长',\r\n            mustNum: '不能为空或字符串',\r\n            checkForm: '请检查信息是否完整且有效',\r\n            tipsImageFormat: '请上传文件后缀名为.jpeg,.jpg,.png的图片文件',\r\n            tipsImageSize: '文件大小不能超过2M',\r\n            yes: '是',\r\n            no: '否',\r\n            more: '更多'\r\n        },\r\n        test: readLanguage(test, 0)\r\n    },\r\n    ...zh\r\n}\r\n","import test from '@/pages/test/language'\r\nimport readLanguage from './readLanguage'\r\n// iview国际化\r\nimport en from 'view-design/dist/locale/en-US'\r\n\r\nexport default {\r\n    ...{\r\n        rules: {\r\n            telephoneRule: 'Please enter the correct telephone number',\r\n            phoneRule: 'Please enter the correct phone number',\r\n            emailRule: 'Please enter the correct email number',\r\n            chineseRule: 'Please enter Chinese',\r\n            englishRule: 'Please enter the English alphabet',\r\n            numberRule: 'Please enter the number',\r\n            positiveIntegerRule: 'Please enter a positive integer',\r\n            englishNumberRule: 'Please enter English or numbers',\r\n            decimalRule: 'Please keep two valid digits',\r\n            selectRule: 'please select',\r\n            enterRule: 'please enter',\r\n            tickRule: 'Please tick',\r\n            mostTickRule: 'Check at most',\r\n            idCardRule: 'Please enter a valid ID number'\r\n        },\r\n        common: {\r\n            logout: 'Logout',\r\n            noData: 'No Data...',\r\n            addBtn: 'Add',\r\n            operate: 'Operate',\r\n            valid: 'valid',\r\n            invalid: 'invalid',\r\n            view: 'view',\r\n            detail: 'detail',\r\n            edit: 'edit',\r\n            status: 'status',\r\n            detailBtn: 'detail',\r\n            searchBtn: 'search',\r\n            reset: 'reset',\r\n            save: 'save',\r\n            del: 'delete',\r\n            deleteConfirm: 'delete confirm',\r\n            cancel: 'cancel',\r\n            ok: 'OK',\r\n            modalTile: 'Please fill in',\r\n            cannotEmpty: 'item cannot be empty',\r\n            cannotUse: 'item cannot be useless',\r\n            systemHint: 'system hint',\r\n            saveFailed: 'save Failed ...',\r\n            saveSuccess: 'save Success',\r\n            serail: 'serail',\r\n            choose: 'choose',\r\n            moreThanOne: 'at last one',\r\n            tooLength: 'characters have exceeded the limit',\r\n            mustNum: 'Cannot be empty or strings',\r\n            tipsImage:\r\n                'Please upload image files with the suffixes of. jpeg,. jpg,. png',\r\n            tipsImageSize: 'File size should not exceed 2M',\r\n            checkForm: 'please check info',\r\n            yes: 'yes',\r\n            no: 'no',\r\n            more: 'more',\r\n            length: 'length',\r\n            width: 'width',\r\n            height: 'height',\r\n            weight: 'weight'\r\n        },\r\n        test: readLanguage(test, 1)\r\n    },\r\n    ...en\r\n}\r\n","import Vue from 'vue'\r\nimport VueI18n from 'vue-i18n'\r\nimport zhCN from './lang/zh-CN'\r\nimport enUS from './lang/en-US'\r\n\r\nVue.use(VueI18n)\r\n\r\nconst messages = {\r\n    'zh-cn': zhCN,\r\n    'en-us': enUS\r\n}\r\nconst i18n = new VueI18n({\r\n    locale: '',\r\n    messages: messages\r\n})\r\n\r\nexport default i18n\r\n"],"sourceRoot":""}