{"version":3,"sources":["webpack:///./src/libs/http-config.js","webpack:///./src/libs/utils.js","webpack:///./src/libs/http.js","webpack:///./src/libs/validateRules.js","webpack:///./src/locale/lang/readLanguage.js","webpack:///./src/locale/lang/zh-CN.js","webpack:///./src/locale/lang/en-US.js","webpack:///./src/locale/index.js"],"names":["devBaseUrl","CONFIG","testBaseUrl","proBaseUrl","baseURL","process","isRepeat","arr","map","Map","item","has","set","hasAuth","code","authCode","window","localStorage","getItem","match","reRender","vm","store","dispatch","dateToString","date","time","Date","getFullYear","getMonth","getDate","timestampFormat","day","year","month","hour","getHours","min","getMinutes","toTimestamp","getTime","axios","defaults","withCredentials","timeout","headers","instance","create","transformResponse","r","res","JSON","parse","e","error","pendingRequest","cancelCurrentRequest","config","length","i","url","c","splice","CancelToken","interceptors","request","use","cancelToken","test","push","state","language","Promise","reject","reRequestConfig","errorCallback","undefined","massage","d","response","data","Message","info","content","duration","closable","getNewToken","get","then","setTimeout","setItem","accessToken","refreshToken","afterGetToken","clear","redirect","encodeURIComponent","location","search","href","origin","catch","err","message","requestConfig","canRefresh","warning","http","api","query","params","delete","post","type","FormData","qs","stringify","arrayFormat","put","patch","i18n","locale","telephone","pattern","t","trigger","phone","email","chinese","english","number","positiveInteger","englishNumber","decimal","index","minMultipleChoice","required","maxMultipleChoice","max","select","idCard","validateTime","rule","value","callback","Array","isArray","Error","lang","lanArr","Object","keys","result","forEach","assign","rules","telephoneRule","phoneRule","emailRule","chineseRule","englishRule","numberRule","positiveIntegerRule","englishNumberRule","decimalRule","selectRule","enterRule","tickRule","mostTickRule","idCardRule","common","logout","noData","addBtn","operate","valid","invalid","view","detail","edit","status","detailBtn","searchBtn","reset","save","del","deleteConfirm","cancel","ok","modalTile","cannotEmpty","cannotUse","systemHint","saveFailed","saveSuccess","serail","choose","moreThanOne","tooLength","mustNum","checkForm","tipsImageFormat","tipsImageSize","yes","no","more","readLanguage","zh","tipsImage","width","height","weight","en","Vue","VueI18n","messages","zhCN","enUS"],"mappings":"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","file":"js/app~751cc44f.fbc68054.js","sourcesContent":["/* eslint-disable */\r\n// let devBaseUrl = process.env.NODE_ENV === 'development' ?  API_BASE ? API_BASE : 'http://192.168.1.36:8090/api/' : ''\r\nlet devBaseUrl = ''\r\n/* eslint-enable */\r\n\r\nconst CONFIG = {\r\n    testBaseUrl: '/api/',\r\n    devBaseUrl: devBaseUrl,\r\n    proBaseUrl: '/api/'\r\n}\r\n\r\nlet baseURL = ''\r\nswitch (process.env.NODE_ENV) {\r\ncase 'production':\r\n    baseURL = CONFIG.proBaseUrl\r\n    break\r\ncase 'testing':\r\n    baseURL = CONFIG.testBaseUrl\r\n    break\r\ncase 'development':\r\n    baseURL = CONFIG.devBaseUrl\r\n    break\r\ndefault:\r\n    baseURL = CONFIG.devBaseUrl\r\n}\r\n\r\nexport default baseURL\r\n","import { Message } from 'view-design'\r\nimport validateRules from './validateRules'\r\nimport store from '../store/index.js'\r\n\r\n/**\r\n * @param {Object} data: 字典里取出来的数据\r\n * @description 根据字典数据里的rules字段生成校验规则\r\n * @return {Object}\r\n */\r\nexport const getRules = (data) => {\r\n    const tempRules = []\r\n    // 当不需要校验的时候，返回一个空的校验规则（这里会默认检验必须是string），不然不会触发表单的on-validate事件\r\n    if (!data.rules.length) {\r\n        return [{}]\r\n    }\r\n    for (const rule of data.rules) {\r\n        // iView如果是必填校验，必填校验必须放到校验数组的第一个，不然页面上不显示必填的*标记（原因不明）\r\n        if (rule === 'required') {\r\n            tempRules.unshift(...validateRules[rule](data.label))\r\n        } else {\r\n            tempRules.push(...validateRules[rule](data.label))\r\n        }\r\n    }\r\n    return tempRules\r\n}\r\n\r\n/**\r\n * @param {Object} arr: 数组\r\n * @description 判断数组里是否有相同的元素\r\n * @return {Object}\r\n */\r\nexport const isRepeat = (arr) => {\r\n    const map = new Map()\r\n    for (const item of arr) {\r\n        if (map.has(item)) {\r\n            return true\r\n        } else {\r\n            map.set(item, true)\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\r\nexport const objEqual = (obj1, obj2) => {\r\n    const keysArr1 = Object.keys(obj1)\r\n    const keysArr2 = Object.keys(obj2)\r\n    if (keysArr1.length !== keysArr2.length) return false\r\n    else if (keysArr1.length === 0 && keysArr2.length === 0) return true\r\n    /* eslint-disable-next-line */\r\n    else return !keysArr1.some(key => obj1[key] != obj2[key])\r\n}\r\n\r\n/**\r\n * @param {Number/String} IDCard\r\n * @description 判断身份证号码是否符合规范 (身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X)\r\n * @return {Boolean}\r\n */\r\nexport const IDCard = (IDCard) => {\r\n    const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/\r\n    return reg.test(IDCard)\r\n}\r\n\r\n/**\r\n * @param {Number/String} phone\r\n * @description 判断判断电话号码\r\n * @return {Boolean}\r\n */\r\nexport const mobilePhone = (phone) => {\r\n    const reg = /^1[345678]\\d{9}$/\r\n    return reg.test(phone)\r\n}\r\n\r\n/**\r\n * @param {arr1,code} 合并后数组，判断去重属性<字符串>\r\n * @description 数组对象去重\r\n * @return newArr  去重后数组对象\r\n * 自查找数组第一层对象\r\n */\r\nexport const duplicateRemove = (arr, code) => {\r\n    let newArr = []\r\n    var obj = {}\r\n    newArr = arr.reduce((item, next) => {\r\n        if (!obj[next[code]]) {\r\n            obj[next[code]] = true\r\n            item.push(next)\r\n        }\r\n        return item\r\n    }, [])\r\n    return newArr\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n    return window.localStorage.getItem('accessToken')\r\n}\r\n\r\nexport const getRefreshToken = () => {\r\n    return window.localStorage.getItem('refreshToken')\r\n}\r\n\r\n/**\r\n * @param {String} code: 当前权限编码\r\n * @description 判断用户是否拥有某功能或某子菜单权限\r\n * @return {Boolean}\r\n */\r\nexport const hasAuth = (code) => {\r\n    const authCode = window.localStorage.getItem('authCode') || ''\r\n    return !!authCode.match(code)\r\n}\r\n\r\n/*\r\n *@description 清空数据，重新渲染\r\n */\r\nexport const reRender = (vm) => {\r\n    store.dispatch('reRender')\r\n}\r\n\r\n/*\r\n * @param arr {Array} 必填项\r\n * @description 验证必填项是否全，不全则提示\r\n * @return {Boolean}\r\n */\r\nexport const isInfoComplete = (arr) => {\r\n    return arr.every(item => {\r\n        if (item === '' || item === undefined) {\r\n            Message.info({\r\n                content: '请补全必填项信息',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }\r\n        return item !== '' && item !== undefined\r\n    })\r\n}\r\n\r\n/*\r\n * @param arr {date}  毫秒数\r\n * @description 将毫秒数的时间转换为如：2018-09-03这种格式\r\n * @return {date}\r\n */\r\nexport const dateToString = (date) => {\r\n    if (date) {\r\n        var time = new Date(date)\r\n        time = time.getFullYear() + '-' + (time.getMonth() + 1) + '-' + time.getDate()\r\n        return time\r\n    }\r\n}\r\n\r\n/*\r\n * @param arr {date}  毫秒数\r\n * @description 将毫秒数的时间转换为如：2018-09-03 12:00这种格式\r\n * @return {date}\r\n */\r\nexport const timestampFormat = (date, day) => {\r\n    if (date) {\r\n        let time = new Date(date)\r\n        const year = time.getFullYear()\r\n        const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${time.getMonth() + 1}`\r\n        const day = time.getDate() > 9 ? time.getDate() : `0${time.getDate()}`\r\n        const hour = time.getHours() > 9 ? time.getHours() : `0${time.getHours()}`\r\n        const min = time.getMinutes() > 9 ? time.getMinutes() : `0${time.getMinutes()}`\r\n        if (day) {\r\n            time = `${year}-${month}-${day}`\r\n        } else {\r\n            time = `${year}-${month}-${day} ${hour}:${min}`\r\n        }\r\n        return time\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 2018-09-03 12:00\r\n * @description 将如：2018-09-03 12:00这种格式转换为毫秒数\r\n * @return {date}\r\n */\r\nexport const toTimestamp = (date) => {\r\n    if (date) {\r\n        const time = new Date(date)\r\n        return time.getTime()\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 21355\r\n * @description 将如：44820分钟转换为31天3小时\r\n * @return {date}\r\n */\r\nexport const toHoursStamp = (StatusMinute) => {\r\n    StatusMinute = parseFloat(StatusMinute)\r\n    const day = parseInt(StatusMinute / 60 / 24)\r\n    const hour = parseInt(StatusMinute / 60 % 24)\r\n    const min = parseInt(StatusMinute % 60)\r\n    StatusMinute = ''\r\n    if (day > 0) {\r\n        StatusMinute += day + '天'\r\n    }\r\n    if (hour > 0) {\r\n        StatusMinute += hour + '小时'\r\n    }\r\n    if (min > 0) {\r\n        StatusMinute += parseFloat(min) + '分钟'\r\n    }\r\n    return StatusMinute\r\n}\r\n\r\nexport const dateTimeToString = (dateTime) => {\r\n    if (dateTime) {\r\n        const temp = dateTime.split('T')\r\n        return `${temp[0]} ${temp[1].slice(0, 8)}`\r\n    }\r\n}\r\n\r\nexport const checkSelect = (vm) => {\r\n    if (!~vm.selectRadioIndex) {\r\n        Message.error({\r\n            content: '需选中下列表格中的某一项',\r\n            duration: 1.2,\r\n            closable: true\r\n        })\r\n    }\r\n    return ~vm.selectRadioIndex\r\n}\r\n\r\n/*\r\n * @param tableData {Array}  后台传来的数据\r\n * @param consts {Array}  前台定义的常量\r\n * @param changeDate {String}  需要转换的字段\r\n * @description 将后台传来的没有翻译的字段翻译成字符串 在原有字段添加一个Name\r\n * @return {Array}\r\n */\r\nexport const conversionConsts = (tableData, consts, changeDate) => {\r\n    for (let i = 0, length1 = tableData.length; i < length1; i++) {\r\n        for (let j = 0, length2 = consts.length; j < length2; j++) {\r\n            if (tableData[i][changeDate] === consts[j].value) {\r\n                const name = changeDate + 'Name'\r\n                tableData[i][name] = consts[j].label\r\n            }\r\n        }\r\n    }\r\n    return tableData\r\n}\r\n\r\n/*\r\n * @param tableData {Array}  表格显示的数据\r\n * @description 将后台传来的含有null的字段转化为空\r\n * @return {Array}\r\n */\r\nexport const deleteNull = (tableData) => {\r\n    tableData.forEach(item => {\r\n        for (var key in item) {\r\n            if (!item[key]) {\r\n                item[key] = ''\r\n            }\r\n        }\r\n    })\r\n    return tableData\r\n}\r\n\r\n/*\r\n * @param start/end {Date}\r\n * @description 检测是否end大于start\r\n * @return {Boolean}\r\n */\r\nexport const checkTimeRange = (start, end, msg) => {\r\n    if (start && end) {\r\n        const result = new Date(start).getTime() < new Date(end).getTime()\r\n        if (!result) {\r\n            Message.error({\r\n                content: msg || '时间范围有误请修改',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }\r\n        return result\r\n    } else {\r\n        Message.error({\r\n            content: '请选择时间',\r\n            duration: 1.2,\r\n            closable: true\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * @description 根据name/params/query判断两个路由对象是否相等\r\n * @param {*} route1 路由对象\r\n * @param {*} route2 路由对象\r\n */\r\nexport const routeEqual = (route1, route2) => {\r\n    const params1 = route1.params || {}\r\n    const params2 = route2.params || {}\r\n    const query1 = route1.query || {}\r\n    const query2 = route2.query || {}\r\n    return (route1.name === route2.name) && objEqual(params1, params2) && objEqual(query1, query2)\r\n}\r\n\r\n/**\r\n * @param {Array} list 标签列表\r\n * @param {String} name 当前关闭的标签的name\r\n */\r\nexport const getNextRoute = (list, route) => {\r\n    let res = {}\r\n    if (list.length === 2) {\r\n        res = getHomeRoute(list)\r\n    } else {\r\n        const index = list.findIndex(item => routeEqual(item, route))\r\n        if (index === list.length - 1) res = list[list.length - 2]\r\n        else res = list[index + 1]\r\n    }\r\n    return res\r\n}\r\n\r\n/**\r\n * @param {Array} routers 路由列表数组\r\n * @description 用于找到路由列表中name为home的对象\r\n */\r\nexport const getHomeRoute = (routers, homeName = 'home') => {\r\n    let i = -1\r\n    const len = routers.length\r\n    let homeRoute = {}\r\n    while (++i < len) {\r\n        const item = routers[i]\r\n        if (item.children && item.children.length) {\r\n            const res = getHomeRoute(item.children, homeName)\r\n            if (res.name) return res\r\n        } else {\r\n            if (item.name === homeName) homeRoute = item\r\n        }\r\n    }\r\n    return homeRoute\r\n}\r\n\r\n/**\r\n * 读取中英文语言文字\r\n */\r\nexport const readLanguage = (language, type) => {\r\n    const lang = {}\r\n    const lanArr = Object.keys(language).map(item => {\r\n        const result = {}\r\n        result[item] = language[item][type]\r\n        return result\r\n    })\r\n    lanArr.forEach(item => {\r\n        Object.assign(lang, item)\r\n    })\r\n    return lang\r\n}\r\n\r\nexport const trim = function (string) {\r\n    return (string || '').replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '')\r\n}\r\n\r\n/*\r\n * @description 获取存储在localStorage中的某对象的某字段\r\n * @param: objName {String} 对象名\r\n * @param: key {String} 字段名\r\n * @return value\r\n * example: getStorageInfo('enterprise', 'enterpriseLicense')\r\n */\r\nexport function getStorageInfo (objName, key) {\r\n    let obj = window.localStorage.getItem(objName)\r\n    if (obj) {\r\n        obj = JSON.parse(obj)\r\n        return obj[key]\r\n    }\r\n}\r\n\r\n/*\r\n * @description 合并图片（如果同一个imageType则合并）\r\n * @param: containerGood {Array} 原始图片混合的数据 [{imageType: xxx, imageList: xxx, id: xxx}, {}]\r\n * @return {Array} 合并后的格式如下\r\n * [\r\n *     {\r\n *          imageType: xxx,\r\n *          imageList: [\r\n *              {imageUrl: xx, ...},\r\n *              {imageUrl: xx, ...}\r\n *          ]\r\n *      },\r\n *      {\r\n *          ...\r\n *      }\r\n * ]\r\n */\r\nexport function mergeImg (imgList) {\r\n    const map = {}\r\n    const result = []\r\n    imgList.forEach(item => {\r\n        if (!map[item.imageType]) {\r\n            map[item.imageType] = item.imageType\r\n            result.push({\r\n                imageTypeI18nDisplay: item.imageTypeI18nDisplay,\r\n                imageType: item.imageType,\r\n                imageList: [item]\r\n            })\r\n        } else {\r\n            result.forEach(r => {\r\n                if (r.imageType === item.imageType) {\r\n                    r.imageList.push(item)\r\n                }\r\n            })\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\n/*\r\n * @description 合并图片（将页面上全部图片合并成一个imageList）\r\n * @param: imageUrls {Array}, imageType: {String} 第一个为图片组件的url，第二个为字典的类型, 第三个为imageResourceId,没有则传false。可传多个这样的组合 arrangeImg(imageUrls, imageType, imageResourceId, imageUrls, imageType, imageResourceId, ...)\r\n * @return {Array} 合并后的格式如下\r\n * [\r\n *     {\r\n *          imageResourceId,\r\n *          imageType: xxx,\r\n *          imageUrls: [\r\n *              'http:....',\r\n *              'http:....'\r\n *          ]\r\n *      },\r\n *      {\r\n *          ...\r\n *      }\r\n * ]\r\n */\r\nexport function arrangeImg () {\r\n    const imageList = []\r\n    if (!(arguments.length % 3 === 0)) {\r\n        throw new Error('传入参数有误，参数个数应为3的倍数')\r\n    } else {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (i % 3 === 0) {\r\n                //  照片地址\r\n                const imgObj = {\r\n                    imageType: arguments[i + 1]\r\n                }\r\n                let tempImgUrls = []\r\n                if (arguments[i] && arguments[i].length > 0) {\r\n                    if (arguments[i + 2]) {\r\n                        imgObj.imageResourceId = arguments[i + 2]\r\n                    }\r\n                    arguments[i].forEach(item => {\r\n                        item.imageUrl ? tempImgUrls.push(item.imageUrl) : tempImgUrls = item.imageUrls\r\n                    })\r\n                }\r\n                imgObj.imageUrls = tempImgUrls\r\n                imageList.push(imgObj)\r\n            }\r\n        }\r\n        return imageList\r\n    }\r\n}\r\n\r\n/*\r\n * @param date {date} 传入分钟为单位的时间间隔 如63分钟\r\n * @description 将如：63转化为1小时3分钟\r\n * @return {date} 1小时3分钟\r\n */\r\nexport const minuteToHour = (date) => {\r\n    if (date) {\r\n        return Math.floor(date / 60) + '时' + date % 60 + '分'\r\n    }\r\n}\r\n","import axios from 'axios'\r\nimport qs from 'qs'\r\nimport { Message } from 'view-design'\r\nimport store from '@/store/index.js'\r\n\r\naxios.defaults.withCredentials = true\r\naxios.defaults.timeout = 10000\r\naxios.defaults.headers['Content-Type'] = 'application/json;charset=UTF-8'\r\nconst baseURL = process.env.VUE_APP_API\r\n\r\nconst instance = axios.create({\r\n    baseURL: baseURL,\r\n    transformResponse: [function (r) {\r\n        let res = r\r\n        try {\r\n            res = JSON.parse(r)\r\n        } catch (e) {\r\n            // throw e\r\n        }\r\n        if (res.error) {\r\n            // 网络请求出错\r\n            throw res\r\n        } else {\r\n            return res\r\n        }\r\n    }]\r\n})\r\n\r\n// pendingRequest: 存放请求中的request\r\nconst pendingRequest = []\r\n// 取消重复请求\r\nfunction cancelCurrentRequest (config) {\r\n    if (pendingRequest && pendingRequest.length > 0) {\r\n        for (const i in pendingRequest) {\r\n            // 当前request正在请求中\r\n            if (config.url === pendingRequest[i].config.url) {\r\n                pendingRequest[i].c()\r\n                pendingRequest.splice(i, 1)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// axios.CancelToken，取消请求\r\nconst CancelToken = axios.CancelToken\r\n\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        // 在index.html文件里添加第三方文件，获取本地ip\r\n        cancelCurrentRequest(config)\r\n        config.cancelToken = new CancelToken(c => {\r\n            // 有些接口在页面里就是要重复调用，所以这里处理一下，排除该接口\r\n            // 根据应用code获取菜单的接口（menuInfoQueryByAppCode），在左侧菜单栏和菜单管理页面都有请求\r\n            // 获取国家省市区级联的接口（get-country）\r\n            if (!/menuInfoQueryByAppCode|get-country/.test(config.url)) {\r\n                pendingRequest.push({ config, c })\r\n            }\r\n        })\r\n        store.dispatch('setRequestLoading', true)\r\n        // 不需要传递token的请求\r\n        if (!/authentication|sms|register|getAllDictionary/.test(config.url)) {\r\n            config.headers['Auth-Token'] = window.localStorage.getItem('accessToken')\r\n        }\r\n        config.headers['Accept-Language'] = store.state.language\r\n        return config\r\n    },\r\n    error => {\r\n        store.dispatch('setRequestLoading', 0)\r\n        Promise.reject(error)\r\n    }\r\n)\r\nlet reRequestConfig = ''\r\ninstance.interceptors.response.use(\r\n    res => {\r\n        // 请求成功后，清除pendingRequest里的当前request\r\n        cancelCurrentRequest(res.config)\r\n        store.dispatch('setRequestLoading', false)\r\n        // 该账户未分配角色权限\r\n        // 暂时还没有\r\n        if (res.data.code === '70002') {\r\n            Message.info({\r\n                content: (res.data && res.data.message) || 'error',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n            return Promise.reject(res.data)\r\n        }\r\n        // token过期\r\n        // 暂时还没有\r\n        if (res.data.code === '700') {\r\n            reRequestConfig = res.config\r\n            if (store.state.canRefresh) {\r\n                store.dispatch('setRefresh', false)\r\n                getNewToken()\r\n            }\r\n            return Promise.reject(res.data)\r\n        }\r\n        // 警告信息（例：表单验证未通过）\r\n        // code是后端根据技术统一规则定义，是不固定的\r\n        if (res.data.code !== '200') {\r\n            Message.warning({\r\n                content: (res.data && res.data.message) || 'error',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n            return Promise.reject(res.data)\r\n        }\r\n        return res\r\n    },\r\n    err => {\r\n        store.dispatch('setRequestLoading', false)\r\n        return Promise.reject(err)\r\n    }\r\n)\r\n\r\nfunction errorCallback (e) {\r\n    // 取消请求时，message信息为空\r\n    if (e.massage === undefined) {\r\n        return Promise.reject(e)\r\n    }\r\n    // token过期\r\n    if (e.code !== '700') {\r\n        try {\r\n            const d = e && e.response && e.response.data\r\n            if (!d) {\r\n                Message.info({\r\n                    content: '网络请求出错了...',\r\n                    duration: 1.2,\r\n                    closable: true\r\n                })\r\n                return Promise.reject(e)\r\n            }\r\n        } catch (e) {\r\n            Message.info({\r\n                content: '出现了奇怪且不可描述的问题',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }\r\n    }\r\n    return Promise.reject(e)\r\n}\r\n\r\nexport function getNewToken () {\r\n    const url = `${baseURL}auth/refreshToken/get`\r\n    return axios.get(url, {\r\n        headers: { 'Auth-Token': window.localStorage.getItem('refreshToken') }\r\n    }).then(res => {\r\n        const r = res.data\r\n        setTimeout(() => {\r\n            store.dispatch('setRefresh', true)\r\n        }, 500)\r\n        if (r.code === '200') {\r\n            window.localStorage.setItem('accessToken', r.data.accessToken)\r\n            window.localStorage.setItem('refreshToken', r.data.refreshToken)\r\n            reRequestConfig.headers['Auth-Token'] = r.data.accessToken\r\n            if (process.env.NODE_ENV !== 'development') {\r\n                reRequestConfig.baseURL = ''\r\n            }\r\n            afterGetToken(reRequestConfig)\r\n        } else {\r\n            // refreshToken过期，重新登录\r\n            window.localStorage.clear()\r\n            const redirect = window.encodeURIComponent(`${window.location.search}`)\r\n            window.location.href = `${window.location.origin}/login?redirect=${redirect}`\r\n        }\r\n    }).catch(err => {\r\n        Message.info({\r\n            content: err.message + '请重新登录',\r\n            duration: 1.2,\r\n            closable: true\r\n        })\r\n    })\r\n}\r\n\r\n/* 展示页面 + 填写页面（需中途发出请求／不需中途发请求）\r\n* 1.展示页面：只需重新发起请求即可，再次请求成功后不需请求提示，且需重载页面展示内容（实际上重载页面即可）\r\n* 2.中途不发请求的填写页面：再次自动保存时发起请求，且需要提示语（可重载可不重载）\r\n* 3.中途会发请求的填写页面：重新发起请求，不需要提示，并保存填写内容到store中（不需要重载即可实现）\r\n* 除了3不做重载，其他均做，区分3在于请求接口的特殊性（/dictionary/getDictionaryAddressTree，/service/node/getAreaNodes）\r\n*/\r\nfunction afterGetToken (requestConfig) {\r\n    // 不需重载的\r\n    if (/dictionary\\/getDictionaryAddressTree|node\\/getAreaNodes/.test(requestConfig.url)) {\r\n        axios(reRequestConfig).then(res => {\r\n        }).catch(err => {\r\n            Message.info({\r\n                content: err.data ? err.data.message : '出错了...',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        })\r\n        // 需重载的\r\n    } else {\r\n        // 1.2还需要区分是否有提示语\r\n        axios(reRequestConfig).then(res => {\r\n            Message.info({\r\n                content: res.data.message,\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        }).catch(err => {\r\n            Message.info({\r\n                content: err.data ? err.data.message : '出错了...',\r\n                duration: 1.2,\r\n                closable: true\r\n            })\r\n        })\r\n        store.dispatch('reRender')\r\n    }\r\n}\r\n\r\nconst http = {\r\n    /**\r\n     * @param {String} api: url请求的地址\r\n     * @param {Object} query:请求时携带的参数\r\n     * @description 对应get请求\r\n     */\r\n    get (api, query) {\r\n        return instance.get(api, {\r\n            params: query\r\n        }).then(res => {\r\n            return res.data\r\n        }).catch(errorCallback)\r\n    },\r\n\r\n    /**\r\n     * @param {String} api: url请求的地址\r\n     * @param {Object} query:请求时携带的参数\r\n     * @description 对应delete请求\r\n     */\r\n    delete (api, query) {\r\n        return instance.delete(api, {\r\n            params: query\r\n        }).then(res => {\r\n            return res.data\r\n        }).catch(errorCallback)\r\n    },\r\n\r\n    /**\r\n     * @param {String} api: url请求的地址\r\n     * @param {Object} data: 请求时携带的数据，type请求时数据的类型，默认formdata\r\n     * @description 对应post请求\r\n     */\r\n    post (api, { data = {}, type = 'json' } = {}) {\r\n        data = data instanceof FormData || typeof data === 'string' || type !== 'formData' ? data : qs.stringify(data, { arrayFormat: 'brackets' })\r\n        return instance.post(api, data).then(res => {\r\n            return res.data\r\n        }).catch(errorCallback)\r\n    },\r\n\r\n    /**\r\n     * @param {String} api: url请求的地址\r\n     * @param {Object} data: 请求时携带的数据，type请求时数据的类型，默认formdata\r\n     * @description 对应put请求\r\n     */\r\n    put (api, { data = {}, type = 'json' } = {}) {\r\n        data = data instanceof FormData || typeof data === 'string' || type !== 'formData' ? data : qs.stringify(data, { arrayFormat: 'brackets' })\r\n        return instance.put(api, data).then(res => {\r\n            return res.data\r\n        }).catch(errorCallback)\r\n    },\r\n\r\n    patch (api, { data = {}, type = 'json' } = {}) {\r\n        data = data instanceof FormData || typeof data === 'string' || type !== 'formData' ? data : qs.stringify(data, { arrayFormat: 'brackets' })\r\n        return instance.patch(api, data).then(res => {\r\n            return res.data\r\n        }).catch(errorCallback)\r\n    }\r\n}\r\n\r\nexport default http\r\n","import i18n from '@/locale'\r\nimport store from '../store'\r\n\r\n// 该js文件会先于main.js执行\r\ni18n.locale = store.state.language\r\n\r\nexport default {\r\n    telephone () {\r\n        return [\r\n            { pattern: /^(\\d{3,4}-)\\d{7,8}$/, message: i18n.t('rules.telephoneRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    phone () {\r\n        return [\r\n            { pattern: /^1([38][0-9]|4[5-9]|5[0-3,5-9]|66|7[0-8]|9[89])[0-9]{8}$/, message: i18n.t('rules.phoneRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    email () {\r\n        return [\r\n            { pattern: /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, message: i18n.t('rules.emailRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    chinese () {\r\n        return [\r\n            { pattern: /^[\\u4e00-\\u9fa5]{2,4}$/, message: i18n.t('rules.chineseRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    english () {\r\n        return [\r\n            { pattern: /^[A-Za-z]+$/, message: i18n.t('rules.englishRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    number () {\r\n        return [\r\n            { type: 'number', message: i18n.t('rules.numberRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    positiveInteger () {\r\n        return [\r\n            { pattern: /^\\+?[1-9][0-9]*$/, message: i18n.t('rules.positiveIntegerRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    englishNumber () {\r\n        return [\r\n            { pattern: /^[A-Za-z0-9]+$/, message: i18n.t('rules.englishNumberRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    decimal (index) {\r\n        return [\r\n            { pattern: /^(([1-9]{1}\\d*)|(0{1}))(\\.\\d{2})$/, message: i18n.t('rules.decimalRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    minMultipleChoice (type) {\r\n        return [\r\n            { required: true, type: 'array', message: `${i18n.t('rules.tickRule')}${type}`, trigger: 'change' }\r\n        ]\r\n    },\r\n    maxMultipleChoice (type, index) {\r\n        return [\r\n            { type: 'array', max: index, message: `${i18n.t('rules.mostTickRule')}${index}个${type}`, trigger: 'change' }\r\n        ]\r\n    },\r\n    select (type) {\r\n        return [\r\n            { required: true, message: `${i18n.t('rules.selectRule')}${type}`, trigger: 'blur' }\r\n        ]\r\n    },\r\n    idCard () {\r\n        return [\r\n            { pattern: /^\\d{17}(\\d|X|x)/, message: i18n.t('rules.idCardRule'), trigger: 'blur' }\r\n        ]\r\n    },\r\n    required (type) {\r\n        return [\r\n            { required: true, message: `${i18n.t('rules.enterRule')}${type}`, trigger: 'blur' }\r\n        ]\r\n    },\r\n    validateTime (rule, value, callback) {\r\n        if (Array.isArray(value)) {\r\n            // 格式为：daterange、datetimerange检测\r\n            value.map(function (item) {\r\n                if (item === '') {\r\n                    return callback(new Error('日期不能为空'))\r\n                }\r\n            })\r\n        } else {\r\n            // 格式为：date、datetime、year、month 检测\r\n            if (value === '') {\r\n                return callback(new Error('日期不能为空'))\r\n            }\r\n        }\r\n        return callback()\r\n    }\r\n}\r\n","/**\r\n * 读取中英文语言文字\r\n */\r\nexport default (language, type) => {\r\n    const lang = {}\r\n    const lanArr = Object.keys(language).map(item => {\r\n        const result = {}\r\n        result[item] = language[item][type]\r\n        return result\r\n    })\r\n    lanArr.forEach(item => {\r\n        Object.assign(lang, item)\r\n    })\r\n    return lang\r\n}\r\n","import test from '@/pages/test/language'\r\nimport readLanguage from './readLanguage'\r\n// iview国际化\r\nimport zh from 'view-design/dist/locale/zh-CN'\r\n\r\nexport default {\r\n    ...{\r\n        rules: {\r\n            telephoneRule: '请输入正确的电话号码',\r\n            phoneRule: '请输入正确的手机号码',\r\n            emailRule: '请输入正确的邮箱号',\r\n            chineseRule: '请输入中文',\r\n            englishRule: '请输入英文字母',\r\n            numberRule: '请输入数字',\r\n            positiveIntegerRule: '请输入正整数',\r\n            englishNumberRule: '请输入英文或者数字',\r\n            decimalRule: '请保留两位有效数字',\r\n            selectRule: '请选择',\r\n            enterRule: '请输入',\r\n            tickRule: '请勾选',\r\n            mostTickRule: '最多勾选',\r\n            idCardRule: '请输入正确的身份证号码'\r\n        },\r\n        common: {\r\n            logout: '注销',\r\n            noData: '暂无数据',\r\n            addBtn: '新增',\r\n            operate: '操作',\r\n            valid: '有效',\r\n            invalid: '无效',\r\n            view: '查看',\r\n            detail: '详情',\r\n            edit: '编辑',\r\n            status: '状态',\r\n            detailBtn: '详细描述',\r\n            searchBtn: '查询',\r\n            reset: '重置',\r\n            save: '保存',\r\n            del: '删除',\r\n            deleteConfirm: '确认删除',\r\n            cancel: '取消',\r\n            ok: '确定',\r\n            modalTile: '请填写',\r\n            cannotEmpty: '信息不能为空',\r\n            cannotUse: '信息无效',\r\n            systemHint: '系统提示',\r\n            saveFailed: '保存失败 ...',\r\n            saveSuccess: '保存成功',\r\n            serail: '序号',\r\n            choose: '选择',\r\n            moreThanOne: '至少选择一项',\r\n            tooLength: '长度过长',\r\n            mustNum: '不能为空或字符串',\r\n            checkForm: '请检查信息是否完整且有效',\r\n            tipsImageFormat: '请上传文件后缀名为.jpeg,.jpg,.png的图片文件',\r\n            tipsImageSize: '文件大小不能超过2M',\r\n            yes: '是',\r\n            no: '否',\r\n            more: '更多'\r\n        },\r\n        test: readLanguage(test, 0)\r\n    },\r\n    ...zh\r\n}\r\n","import test from '@/pages/test/language'\r\nimport readLanguage from './readLanguage'\r\n// iview国际化\r\nimport en from 'view-design/dist/locale/en-US'\r\n\r\nexport default {\r\n    ...{\r\n        rules: {\r\n            telephoneRule: 'Please enter the correct telephone number',\r\n            phoneRule: 'Please enter the correct phone number',\r\n            emailRule: 'Please enter the correct email number',\r\n            chineseRule: 'Please enter Chinese',\r\n            englishRule: 'Please enter the English alphabet',\r\n            numberRule: 'Please enter the number',\r\n            positiveIntegerRule: 'Please enter a positive integer',\r\n            englishNumberRule: 'Please enter English or numbers',\r\n            decimalRule: 'Please keep two valid digits',\r\n            selectRule: 'please select',\r\n            enterRule: 'please enter',\r\n            tickRule: 'Please tick',\r\n            mostTickRule: 'Check at most',\r\n            idCardRule: 'Please enter a valid ID number'\r\n        },\r\n        common: {\r\n            logout: 'Logout',\r\n            noData: 'No Data...',\r\n            addBtn: 'Add',\r\n            operate: 'Operate',\r\n            valid: 'valid',\r\n            invalid: 'invalid',\r\n            view: 'view',\r\n            detail: 'detail',\r\n            edit: 'edit',\r\n            status: 'status',\r\n            detailBtn: 'detail',\r\n            searchBtn: 'search',\r\n            reset: 'reset',\r\n            save: 'save',\r\n            del: 'delete',\r\n            deleteConfirm: 'delete confirm',\r\n            cancel: 'cancel',\r\n            ok: 'OK',\r\n            modalTile: 'Please fill in',\r\n            cannotEmpty: 'item cannot be empty',\r\n            cannotUse: 'item cannot be useless',\r\n            systemHint: 'system hint',\r\n            saveFailed: 'save Failed ...',\r\n            saveSuccess: 'save Success',\r\n            serail: 'serail',\r\n            choose: 'choose',\r\n            moreThanOne: 'at last one',\r\n            tooLength: 'characters have exceeded the limit',\r\n            mustNum: 'Cannot be empty or strings',\r\n            tipsImage:\r\n                'Please upload image files with the suffixes of. jpeg,. jpg,. png',\r\n            tipsImageSize: 'File size should not exceed 2M',\r\n            checkForm: 'please check info',\r\n            yes: 'yes',\r\n            no: 'no',\r\n            more: 'more',\r\n            length: 'length',\r\n            width: 'width',\r\n            height: 'height',\r\n            weight: 'weight'\r\n        },\r\n        test: readLanguage(test, 1)\r\n    },\r\n    ...en\r\n}\r\n","import Vue from 'vue'\r\nimport VueI18n from 'vue-i18n'\r\nimport zhCN from './lang/zh-CN'\r\nimport enUS from './lang/en-US'\r\n\r\nVue.use(VueI18n)\r\n\r\nconst messages = {\r\n    'zh-cn': zhCN,\r\n    'en-us': enUS\r\n}\r\nconst i18n = new VueI18n({\r\n    locale: '',\r\n    messages: messages\r\n})\r\n\r\nexport default i18n\r\n"],"sourceRoot":""}