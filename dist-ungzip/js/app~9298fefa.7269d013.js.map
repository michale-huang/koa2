{"version":3,"sources":["webpack:///./src/api/common.js","webpack:///./src/api/api.js","webpack:///./src/api/logisticsCommission.js","webpack:///./src/api/dictionary.js"],"names":["getRequest","url","path","params","api","Object","keys","forEach","item","http","get","then","res","code","Message","info","content","msg","postRequest","data","post","permission","process","entrust","mould","dictionary","freight","logistics","product","apiOnceEntrustInfoAdd","baseUrl","apiAddPeriodEntrustBasicInfo","apiAddPeriodEntrustExecutory","apiGetRoleCstmEntrustList","apiModifyEntrustStatus","apiModifyPeriodEntrustStatus","apiGetEntrustCargo","apiGetPeriodEntrustBasicDetails","apiGenerateEntrustExecutory","apiGetPeriodOnceEntrustDetails","apiGetPeriodEntrustAffiliation","apiCityDic","dicbaseUrl","apiChangJing","apiGetOrderList","productUrl","apiModifyOrderStatus","apiGetOrderDetails","apiDictionaryTypeQueryList","apiDictionaryTypeAdd","apiDictionaryTypeDelete","apiDictionaryTypeUpdate","apiDictionaryAdd","apiDictionaryDeleteById","apiDictionaryQueryListByKeyAndType","apiDictionaryUpdate","apiDictionaryQueryByCacheTypeKey","apiDictionaryQueryAll","apiClearCache"],"mappings":"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","file":"js/app~9298fefa.7269d013.js","sourcesContent":["import http from '@/libs/http'\r\nimport { Message } from 'view-design'\r\n\r\n/*\r\n * put, post, patch: 接受路径参数和body参数\r\n * get, delete: url即了，以后可能会有问号类型的参数\r\n */\r\n\r\nexport const wxGetRequest = (url, path = {}, params = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            const arr = []\r\n            for (const key in path[item]) {\r\n                arr.push(`${key}=${path[item][key]}`)\r\n            }\r\n            api = api + `?${arr.join('&')}`\r\n        })\r\n    }\r\n    return http.get(api, params).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else if (res.code === '30002') {\r\n            throw res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\nexport const getRequestValueKey = (url, path = {}, params = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `?${item}=${path[item]}`\r\n        })\r\n    }\r\n    return http.get(api, params).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else if (res.code === '30002') {\r\n            throw res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\nexport const getRequest = (url, path = {}, params = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `/${path[item]}`\r\n        })\r\n    }\r\n    return http.get(api, params).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else if (res.code === '30002') {\r\n            throw res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\n\r\nexport const postRequest = (url, { path = {}, data = {} } = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `/${path[item]}`\r\n        })\r\n    }\r\n    return http.post(api, { data: data }).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\n\r\nexport const putRequest = (url, { path = {}, data = {} } = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `/${path[item]}`\r\n        })\r\n    }\r\n    return http.put(api, { data: data }).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\n\r\nexport const patchRequest = (url, { path = {}, data = {} } = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `/${path[item]}`\r\n        })\r\n    }\r\n    return http.patch(api, { data: data }).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\n\r\nexport const deleteRequest = (url, path = {}) => {\r\n    let api = url\r\n    if (path && Object.keys(path)) {\r\n        Object.keys(path).forEach(item => {\r\n            api = api + `/${path[item]}`\r\n        })\r\n    }\r\n    return http.delete(api).then(res => {\r\n        if (res.code === '200') {\r\n            return res\r\n        } else {\r\n            Message.info({ content: res.msg })\r\n            throw res\r\n        }\r\n    })\r\n}\r\n","// 后端配置网关后，可以分发接口到对应的端口上，生产环境不需要前缀\r\n// export const permission = process.env.NODE_ENV === 'development' ? process.env.VUE_APP_PERMISSION_API : ''\r\n// export const mould = process.env.NODE_ENV === 'development' ? process.env.VUE_APP_MOULD_API : ''\r\n// export const dictionary = process.env.NODE_ENV === 'development' ? process.env.VUE_APP_DICTIONARY_API : ''\r\n\r\n// 后端没有配置网关，生产环境也需要添加前缀\r\nexport const permission = process.env.VUE_APP_PERMISSION_API\r\nexport const entrust = process.env.VUE_APP_ENTRUST_API\r\nexport const mould = process.env.VUE_APP_MOULD_API\r\nexport const dictionary = process.env.VUE_APP_DICTIONARY_API\r\nexport const freight = process.env.VUE_APP_FREIGHT_API\r\nexport const logistics = process.env.VUE_APP_LOGISTICS_API\r\nexport const product = process.env.VUE_APP_PRODUCT_API\r\n","import { postRequest, getRequest } from './common'\r\nimport {\r\n    entrust as baseUrl,\r\n    dictionary as dicbaseUrl,\r\n    product as productUrl\r\n} from './api'\r\n\r\n//  新增单次物流委托/entrust/add-once-entrust\r\nexport const apiOnceEntrustInfoAdd = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/add-once-entrust`, data)\r\n}\r\n\r\n//  新增周期规律基本信息/entrust/add-period-entrust-basic\r\nexport const apiAddPeriodEntrustBasicInfo = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/add-period-entrust-basic`, data)\r\n}\r\n//  新增周期规律子信息/entrust/add-period-entrust-executory\r\nexport const apiAddPeriodEntrustExecutory = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/add-period-entrust-executory`, data)\r\n}\r\n//  查询列表/entrust/get-role-mkt-entrust-list（销售）\r\nexport const apiGetRoleMktEntrustList = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/get-role-mkt-entrust-list`, data)\r\n}\r\n//  查询列表/entrust/get-role-cstm-entrust-list（客户）\r\nexport const apiGetRoleCstmEntrustList = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/get-role-cstm-entrust-list`, data)\r\n}\r\n//  查询列表/entrust/get-role-dspt-entrust-list（调度）\r\nexport const apiGetRoleDsptEntrustList = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/get-role-dspt-entrust-list`, data)\r\n}\r\n//  改变委托状态/entrust/modify-entrust-status\r\nexport const apiModifyEntrustStatus = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/modify-entrust-status`, data)\r\n}\r\n//  周期委托发送/entrust/modify-period-entrust-status\r\nexport const apiModifyPeriodEntrustStatus = (data) => {\r\n    return postRequest(`${baseUrl}/entrust/modify-period-entrust-status`, data)\r\n}\r\n\r\n//  查询货物信息entrust/get-entrust-cargo/{entrustCode}\r\nexport const apiGetEntrustCargo = (data) => {\r\n    return getRequest(`${baseUrl}/entrust/get-entrust-cargo`, data)\r\n}\r\n//  查询基本详情entrust/get-period-entrust-basic-details/{entrustCode}\r\nexport const apiGetPeriodEntrustBasicDetails = (data) => {\r\n    return getRequest(\r\n        `${baseUrl}/entrust/get-period-entrust-basic-details`,\r\n        data\r\n    )\r\n}\r\n// 生成子委托信息entrust/generate-entrust-executory/{entrustCode}\r\nexport const apiGenerateEntrustExecutory = (data) => {\r\n    return getRequest(`${baseUrl}/entrust/generate-entrust-executory`, data)\r\n}\r\n\r\n//  查询单次委托详情entrust/get-period-once-entrust-details/{executoryEntrustCode}\r\nexport const apiGetPeriodOnceEntrustDetails = (data) => {\r\n    return getRequest(\r\n        `${baseUrl}/entrust/get-period-once-entrust-details`,\r\n        data\r\n    )\r\n}\r\n//  查询子委托详情entrust/get-period-entrust-affiliation/{entrustCode}\r\nexport const apiGetPeriodEntrustAffiliation = (data) => {\r\n    return getRequest(`${baseUrl}/entrust/get-period-entrust-affiliation`, data)\r\n}\r\n//  城市/dictionary/get-country\r\nexport const apiCityDic = (data) => {\r\n    return getRequest(`${dicbaseUrl}/dictionary/get-country`, data)\r\n}\r\n// 城市下的场所 /station/param/{city}\r\nexport const apiChangJing = (data) => {\r\n    return getRequest(`${dicbaseUrl}/station/param`, data)\r\n}\r\n\r\n//  查询订单列表/order/get-order-list（供应商）\r\nexport const apiGetOrderList = (data) => {\r\n    return postRequest(`${productUrl}/order/get-order-list`, data)\r\n}\r\n//  订单的状态改变order/modify-order-status\r\nexport const apiModifyOrderStatus = (data) => {\r\n    return postRequest(`${productUrl}/order/modify-order-status`, data)\r\n}\r\n//  查询订单详情order/get-order-details\r\nexport const apiGetOrderDetails = (data) => {\r\n    return getRequest(`${productUrl}/order/get-order-details`, data)\r\n}\r\n","import { postRequest, getRequest } from './common'\r\nimport { dictionary as baseUrl } from './api'\r\n\r\n//  查询所有字典类型列表\r\nexport const apiDictionaryTypeQueryList = (data) => {\r\n    return postRequest(`${baseUrl}/dictionaryType/dictionaryTypeQueryList`, data)\r\n}\r\n\r\n//  新增字典类型信息\r\nexport const apiDictionaryTypeAdd = (path) => {\r\n    return postRequest(`${baseUrl}/dictionaryType/dictionaryTypeAdd`, path)\r\n}\r\n\r\n//  删除字典类型\r\nexport const apiDictionaryTypeDelete = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryType/dictionaryTypeDelete`, data)\r\n}\r\n\r\n//  根据KEY删除字典类型信息\r\nexport const apiDictionaryTypeDeleteByKey = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryType/dictionaryTypeDeleteByKey`, data)\r\n}\r\n\r\n//  根据字典类型ID查询字典类型列表\r\nexport const apiDictionaryTypeQueryById = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryType/dictionaryTypeQueryById`, data)\r\n}\r\n\r\n//  根据字典类型KEY查询字典类型列表\r\nexport const apiDictionaryTypeQueryByKey = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryType/dictionaryTypeQueryByKey`, data)\r\n}\r\n\r\n//  修改字典类型信息\r\nexport const apiDictionaryTypeUpdate = (data) => {\r\n    return postRequest(`${baseUrl}/dictionaryType/dictionaryTypeUpdate`, data)\r\n}\r\n\r\n//  添加字典\r\nexport const apiDictionaryAdd = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryAdd`, data)\r\n}\r\n\r\n//  删除字典\r\nexport const apiDictionaryDeleteById = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryDeleteByIds`, data)\r\n}\r\n\r\n//  删除类型下所有字典集\r\nexport const apiDictionaryDeleteByTypeKey = (data) => {\r\n    return getRequest(`${baseUrl}/dictionary/dictionaryDeleteByTypeKey`, data)\r\n}\r\n\r\n//  根据字典类型KEY与字典KEY删除某个字典信息\r\nexport const apiDictionaryDeleteByTypeKeyAndKey = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryDeleteByTypeKeyAndKey`, data)\r\n}\r\n\r\n//  根据ID查询字典\r\nexport const apiDictionaryQueryById = (data) => {\r\n    return getRequest(`${baseUrl}/dictionary/dictionaryQueryById`, data)\r\n}\r\n\r\n//  根据KEY查询字典\r\nexport const apiDictionaryQueryByKey = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryQueryByKey`, data)\r\n}\r\n\r\n//  查询字典类型下所有字典(返回集合)\r\nexport const apiDictionaryQueryListByKey = (data) => {\r\n    return getRequest(`${baseUrl}/dictionary/dictionaryQueryListByKey`, data)\r\n}\r\n\r\n//  分页查询字典列表（字典key与字典类型为参数）\r\nexport const apiDictionaryQueryListByKeyAndType = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryQueryListByKeyAndType`, data)\r\n}\r\n\r\n//  修改字典信息\r\nexport const apiDictionaryUpdate = (data) => {\r\n    return postRequest(`${baseUrl}/dictionary/dictionaryUpdate`, data)\r\n}\r\n\r\n// 根据字典类型从缓存获取翻译\r\nexport const apiDictionaryQueryByCacheTypeKey = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryCommonality/dictionaryQueryByCacheTypeKey`, data)\r\n}\r\n\r\n// 获取所有字典类型下的所有字典\r\nexport const apiDictionaryQueryAll = (data) => {\r\n    return getRequest(`${baseUrl}/dictionaryCommonality/dictionaryQueryAll`, data)\r\n}\r\n\r\n// 清除缓存\r\nexport const apiClearCache = (data) => {\r\n    return postRequest(`${baseUrl}/dictionaryCommonality/dictionaryAddRedisByType`, data)\r\n}\r\n"],"sourceRoot":""}