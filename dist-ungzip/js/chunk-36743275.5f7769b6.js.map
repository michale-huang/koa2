{"version":3,"sources":["webpack:///./src/api/productEditor.js","webpack:///./src/mixins/addProductContent.js"],"names":["apiTransportQueryList","data","postRequest","baseUrl","apiTransportAuditTrue","apiTransportAuditFalse","apiTransportAuditTrueOk","getRequest","apiTransportAuditTrueNo","apiTransportAuditFalseOk","apiTransportAuditFalseNo","apiTransportPrefPrice","apiTransportAddCode","apiTransportAddServer","apiTransportQueryDetail","apiStationQueryList","apiStationAuditTrue","apiStationAuditFalse","apiStationAuditTrueOk","apiStationAuditTrueNo","apiStationAuditFalseOk","apiStationAuditFalseNo","apiStationPrefPrice","apiStationAddCode","apiStationAddServer","apiStationQueryDetail","apiQueryScene","apiQueryTaskBySceneCode","isSceneModalShow","titleNames","curSceneName","tabIndex","isBasicTask","curCollapse","curProductIndex","productAllInfo","selectList","isSceneSpread","dictionary","sceneName","sceneTableData","sceneCode","sceneColumns","title","align","type","width","key","slot","previewTableData","previewColumns","sortType","selectedData","hasPendingProduct","methods","sceneVisibleChange","changeStatus","this","handleBtn","index","handleReset","$refs","parameterFormValidate","resetFields","saveParameter","vm","$Message","warning","siteValid","parameterValid","formValidate","validate","valid","successCallback","showParameters","showSites","parameters","val","push","split","siteData","unshift","serverCode","sceneTabIndex","join","sites","postData","productType","parameterData","trspType","contaSizeType","contaSource","Object","values","hasParameter","some","item","departurePort","dispatchCity","dispatchSite","destinationPort","destinationCity","destinationSite","sttnCode","then","selectionChange","changeRowData","row","scene","Number","previewSort","verifyItem","length","sort","isNaN","test","isRepeat","searchScene","apiGetScene","chooseScene","success","serverType","logisticsType","Promise","resolve","confirmChooseScene","scenesList","sceneNames","mutexScene","mSceneCode","oScene","content","duration","closable","symbiosisScene","sSceneCode","hasSymbiosisScene","symbiosisSceneName","taskBasesList","taskAffixesList","$set","handleSceneBtn","productIndex","lists","baseTaskQueryRes","baseTask","taskCode","taskName","affixTaskQueryRes","affixTask","isChecked","chooseProduct","code","status","indexOf","splice","goToAddProduct","$router","_handelDir","apiChangJing","city","arr","newArr","map","value","label","sttnName"],"mappings":"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","file":"js/chunk-36743275.5f7769b6.js","sourcesContent":["import { postRequest, getRequest } from './common'\r\nimport { product as baseUrl } from './api'\r\n\r\n// 运输产品\r\n// 查询运输产品列表\r\nexport const apiTransportQueryList = (data) => {\r\n    return postRequest(`${baseUrl}/transport/query-list`, data)\r\n}\r\n// 有效申请、有效\r\nexport const apiTransportAuditTrue = (data) => {\r\n    return postRequest(`${baseUrl}/transport/audit-true`, data)\r\n}\r\n// 失效申请、失效\r\nexport const apiTransportAuditFalse = (data) => {\r\n    return postRequest(`${baseUrl}/transport/audit-false`, data)\r\n}\r\n// 有效申请审核同意\r\nexport const apiTransportAuditTrueOk = (data) => {\r\n    return getRequest(`${baseUrl}/transport/audit-true/ok`, data)\r\n}\r\n// 有效申请审核不同意\r\nexport const apiTransportAuditTrueNo = (data) => {\r\n    return postRequest(`${baseUrl}/transport/audit-true/no`, data)\r\n}\r\n// 失效申请审核同意\r\nexport const apiTransportAuditFalseOk = (data) => {\r\n    return getRequest(`${baseUrl}/transport/audit-false/ok`, data)\r\n}\r\n// 失效申请审核不同意\r\nexport const apiTransportAuditFalseNo = (data) => {\r\n    return postRequest(`${baseUrl}/transport/audit-false/no`, data)\r\n}\r\n// 设置优惠折扣\r\nexport const apiTransportPrefPrice = (data) => {\r\n    return postRequest(`${baseUrl}/transport/pref-price`, data)\r\n}\r\n// 取消优惠折扣\r\nexport const apiTransportOffPrice = (data) => {\r\n    return postRequest(`${baseUrl}/transport/off-price`, data)\r\n}\r\n// 保存参数获取产品编号\r\nexport const apiTransportAddCode = (data) => {\r\n    return getRequest(`${baseUrl}/transport/add-code`, data)\r\n}\r\n// 新增运输产品\r\nexport const apiTransportAddServer = (data) => {\r\n    return postRequest(`${baseUrl}/transport/add-server`, data)\r\n}\r\n// 运输产品详情\r\nexport const apiTransportQueryDetail = (data) => {\r\n    return getRequest(`${baseUrl}/transport/query-detail`, data)\r\n}\r\n\r\n// 场所产品\r\n// 查询场所产品列表\r\nexport const apiStationQueryList = (data) => {\r\n    return postRequest(`${baseUrl}/station/query-page`, data)\r\n}\r\n// 有效申请、有效\r\nexport const apiStationAuditTrue = (data) => {\r\n    return postRequest(`${baseUrl}/station/audit-true`, data)\r\n}\r\n// 失效申请、失效\r\nexport const apiStationAuditFalse = (data) => {\r\n    return postRequest(`${baseUrl}/station/audit-false`, data)\r\n}\r\n// 有效申请审核同意\r\nexport const apiStationAuditTrueOk = (data) => {\r\n    return getRequest(`${baseUrl}/station/audit-true/ok`, data)\r\n}\r\n// 有效申请审核不同意\r\nexport const apiStationAuditTrueNo = (data) => {\r\n    return postRequest(`${baseUrl}/station/audit-true/no`, data)\r\n}\r\n// 失效申请审核同意\r\nexport const apiStationAuditFalseOk = (data) => {\r\n    return getRequest(`${baseUrl}/station/audit-false/ok`, data)\r\n}\r\n// 失效申请审核不同意\r\nexport const apiStationAuditFalseNo = (data) => {\r\n    return postRequest(`${baseUrl}/station/audit-false/no`, data)\r\n}\r\n// 设置优惠折扣\r\nexport const apiStationPrefPrice = (data) => {\r\n    return postRequest(`${baseUrl}/station/pref-price`, data)\r\n}\r\n// 取消优惠折扣\r\nexport const apiStationOffPrice = (data) => {\r\n    return postRequest(`${baseUrl}/station/off-price`, data)\r\n}\r\n// 保存参数获取产品编号\r\nexport const apiStationAddCode = (data) => {\r\n    return getRequest(`${baseUrl}/station/add-code`, data)\r\n}\r\n// 新增场所产品\r\nexport const apiStationAddServer = (data) => {\r\n    return postRequest(`${baseUrl}/station/add-server`, data)\r\n}\r\n// 场所产品详情\r\nexport const apiStationQueryDetail = (data) => {\r\n    return getRequest(`${baseUrl}/station/query-detail`, data)\r\n}\r\n\r\n// 场景\r\n// 查询场景\r\nexport const apiQueryScene = (data) => {\r\n    return postRequest(`${baseUrl}/server/query-scene`, data)\r\n}\r\n// 查询场景下的任务\r\nexport const apiQueryTaskBySceneCode = (data) => {\r\n    return getRequest(`${baseUrl}/server/query-task/`, data)\r\n}\r\n","import { isRepeat } from '@/libs/utils'\r\nimport { apiTransportAddCode, apiStationAddCode, apiQueryScene, apiQueryTaskBySceneCode } from '@/api/productEditor'\r\nimport { apiChangJing } from '@/api/logisticsCommission'\r\nexport default {\r\n    data () {\r\n        return {\r\n            isSceneModalShow: false,\r\n            titleNames: ['设置基础任务费用时长', '设置附加任务费用时长'],\r\n            curSceneName: '',\r\n            tabIndex: 1,\r\n            isBasicTask: true,\r\n            // chosenScene: [],\r\n            curCollapse: '',\r\n            curProductIndex: 0,\r\n            // 所有产品的参数信息、场景、每个场景对应的基础任务（附加任务）、产品截止时间都放在一起\r\n            // 因为新增页面可以新增多个产品\r\n            productAllInfo: [],\r\n            selectList: [],\r\n            // 展开所有场景\r\n            isSceneSpread: false,\r\n            // 字典数据\r\n            dictionary: {},\r\n            sceneName: '',\r\n            sceneTableData: [\r\n                {\r\n                    sceneCode: 1,\r\n                    sceneName: '场景1'\r\n                },\r\n                {\r\n                    sceneCode: 2,\r\n                    sceneName: '场景2'\r\n                }\r\n            ],\r\n            sceneColumns: [\r\n                {\r\n                    title: '选择',\r\n                    align: 'center',\r\n                    type: 'selection',\r\n                    width: 100\r\n                },\r\n                {\r\n                    title: '场景名称',\r\n                    align: 'center',\r\n                    key: 'sceneName'\r\n                },\r\n                {\r\n                    title: '排序值',\r\n                    align: 'center',\r\n                    slot: 'sort',\r\n                    width: 150\r\n                }\r\n            ],\r\n            previewTableData: [],\r\n            previewColumns: [\r\n                {\r\n                    title: '序号',\r\n                    align: 'center',\r\n                    type: 'index',\r\n                    width: 100\r\n                },\r\n                {\r\n                    title: '场景名称',\r\n                    align: 'center',\r\n                    key: 'sceneName'\r\n                },\r\n                {\r\n                    title: '排序值',\r\n                    align: 'center',\r\n                    key: 'sort',\r\n                    sortType: 'asc',\r\n                    width: 150\r\n                }\r\n            ],\r\n            selectedData: [],\r\n            // 还有产品没有保存\r\n            hasPendingProduct: false\r\n        }\r\n    },\r\n    methods: {\r\n        sceneVisibleChange (changeStatus) {\r\n            this.isSceneModalShow = changeStatus\r\n        },\r\n        // 切换任务\r\n        handleBtn (index) {\r\n            this.tabIndex = index + 1\r\n            // 基础任务\r\n            if (index === 0) {\r\n                this.isBasicTask = true\r\n            } else {\r\n                // 附加任务\r\n                this.isBasicTask = false\r\n            }\r\n        },\r\n        // 重置\r\n        handleReset () {\r\n            this.$refs.parameterFormValidate.resetFields()\r\n        },\r\n        // 保存参数生成产品\r\n        saveParameter () {\r\n            const vm = this\r\n            if (this.hasPendingProduct) {\r\n                this.$Message.warning('请先保存产品！')\r\n                return\r\n            }\r\n            let [siteValid, parameterValid] = [true, true]\r\n            // 路线场所form\r\n            if (this.$refs.formValidate) {\r\n                this.$refs.formValidate.validate(valid => {\r\n                    valid ? siteValid = true : siteValid = false\r\n                })\r\n            }\r\n            // 参数form\r\n            if (this.$refs.parameterFormValidate) {\r\n                this.$refs.parameterFormValidate.validate(valid => {\r\n                    valid ? parameterValid = true : parameterValid = false\r\n                })\r\n            }\r\n            // 所有的表单验证都通过\r\n            if (siteValid && parameterValid) {\r\n                // 运输产品 && 运输类型为集装箱（C）\r\n                if (this.productType === 'T' && this.parameterData.trspType.split('~')[0] === 'C' && (!this.parameterData.contaSizeType || !this.parameterData.contaSource)) {\r\n                    this.$Message.warning('运输类型为集装箱，集装箱尺寸类型和集装箱来源必填')\r\n                    return\r\n                }\r\n                const parameters = Object.values(this.parameterData)\r\n                // 判断是否选择了参数\r\n                const hasParameter = parameters.some(item => item)\r\n                if (!hasParameter) {\r\n                    this.$Message.warning('请先选择参数！')\r\n                    return\r\n                }\r\n                // 判断参数是否完全重复，需要发送ajax请求让后端来判断\r\n                // 因为有的产品已经提前新增过了，这里拿不到其他产品的参数信息\r\n                // 将参数value从数据中提取出来\r\n                // 后续保存产品的时候还要发送这些数据\r\n                const postData = {}\r\n                for (const key in this.parameterData) {\r\n                    // 点击重置后，this.parameterData[key]为undefined\r\n                    postData[key] = this.parameterData[key] && this.parameterData[key].split('~')[0]\r\n                }\r\n                for (const key in this.siteData) {\r\n                    postData[key] = this.siteData[key] && this.siteData[key].split('~')[0]\r\n                }\r\n                // 运输产品：整合启运地、场所，目的地、场所\r\n                if (this.productType === 'T') {\r\n                    postData.departurePort = `${postData.dispatchCity};${postData.dispatchSite}`\r\n                    postData.destinationPort = `${postData.destinationCity};${postData.destinationSite}`\r\n                    delete postData.dispatchCity\r\n                    delete postData.dispatchSite\r\n                    delete postData.destinationCity\r\n                    delete postData.destinationSite\r\n                } else if (this.productType === 'Y') {\r\n                    // 场所产品：整合国家城市、场所\r\n                    postData.sttnCode = `${postData.dispatchCity};${postData.dispatchSite}`\r\n                    delete postData.dispatchCity\r\n                    delete postData.dispatchSite\r\n                }\r\n\r\n                // 获取产品编号\r\n                if (this.productType === 'T') {\r\n                    // 运输产品\r\n                    apiTransportAddCode().then(({ data }) => {\r\n                        successCallback(data)\r\n                    })\r\n                } else if (this.productType === 'Y') {\r\n                    // 场所产品\r\n                    apiStationAddCode().then(({ data }) => {\r\n                        successCallback(data)\r\n                    })\r\n                }\r\n                // eslint-disable-next-line\r\n                function successCallback (data) {\r\n                    vm.hasPendingProduct = true\r\n                    const showParameters = []\r\n                    const showSites = []\r\n                    for (const val of parameters) {\r\n                        // 点击重置后，vm.parameterData[key]为undefined\r\n                        // 去除undefined\r\n                        if (val) {\r\n                            showParameters.push(val.split('~')[1])\r\n                        }\r\n                    }\r\n\r\n                    for (const key in vm.siteData) {\r\n                        showSites[key] = vm.siteData[key].split('~')[1]\r\n                    }\r\n                    vm.productAllInfo.unshift({\r\n                        serverCode: data,\r\n                        sceneTabIndex: -1,\r\n                        parameters: showParameters.join('+'),\r\n                        sites: showSites,\r\n                        ...postData\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        selectionChange (selectedData) {\r\n            this.selectedData = selectedData\r\n        },\r\n        // 数据项发生改变\r\n        changeRowData (row, index, key) {\r\n            // 将改行改变后的数据更新到accountData，后续选中才有数据\r\n            this.sceneTableData[index] = row\r\n            // 先选中，再选择帐户类型，需要手动改变选中的帐户的帐户类型\r\n            for (const scene of this.selectedData) {\r\n                if (scene.sceneName === row.sceneName) {\r\n                    // 排序值在后面的排序要用到，要转换成Number类型，不然字符串之间比较大小会出错\r\n                    if (key === 'sort') {\r\n                        // Number(row[key])可能会被转换成NaN\r\n                        scene[key] = Number(row[key])\r\n                    } else {\r\n                        scene[key] = row[key]\r\n                    }\r\n                    break\r\n                }\r\n            }\r\n        },\r\n        // 排序预览\r\n        previewSort () {\r\n            if (!this.verifyItem()) return\r\n            this.previewTableData = this.selectedData\r\n        },\r\n        // 新增场景、预览排序校验\r\n        verifyItem () {\r\n            // 至少选择一个场景\r\n            // 没有这个需求\r\n            if (!this.selectedData.length) {\r\n                this.$Message.warning('请至少选择一个场景！')\r\n                return false\r\n            }\r\n            const sort = []\r\n            for (const item of this.selectedData) {\r\n                // 勾选的场景的排序值必填\r\n                // 排序值可能会被转换成NaN\r\n                if (!item.sort && !Number.isNaN(item.sort)) {\r\n                    this.$Message.warning('选中的场景的排序值必填！')\r\n                    return false\r\n                }\r\n                // 排序值只能是正整数\r\n                if (!/^\\d+$/.test(item.sort)) {\r\n                    this.$Message.warning('排序值只能是整数！')\r\n                    return\r\n                }\r\n                sort.push(item.sort)\r\n            }\r\n            // 勾选的场景的排序值不能重复\r\n            if (isRepeat(sort)) {\r\n                this.$Message.warning('选中的场景的排序值不能重复！')\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        // 查询场景\r\n        async searchScene () {\r\n            this.apiGetScene()\r\n        },\r\n        // 选择场景\r\n        async chooseScene (index) {\r\n            this.sceneName = ''\r\n            const success = await this.apiGetScene()\r\n            if (success) {\r\n                this.curProductIndex = index\r\n                this.isSceneModalShow = true\r\n            }\r\n        },\r\n        apiGetScene (index = this.curProductIndex) {\r\n            const data = {\r\n                sceneName: this.sceneName,\r\n                serverType: this.productType,\r\n                trspType: this.productAllInfo[index].trspType.split('~')[0],\r\n                logisticsType: this.productAllInfo[index].logisticsType.split('~')[0]\r\n            }\r\n            return new Promise(resolve => {\r\n                apiQueryScene({ data }).then(({ data }) => {\r\n                    this.sceneTableData = data\r\n                    resolve(true)\r\n                })\r\n            })\r\n        },\r\n        // 确认选择场景\r\n        confirmChooseScene () {\r\n            if (!this.verifyItem()) return\r\n            // 将参数名称从数据中提取出来\r\n            const [scenesList, sceneNames] = [[], []]\r\n            for (const scene of this.selectedData) {\r\n                // 判断场景的共生、互斥\r\n                if (scene.mutexScene) {\r\n                    // 所有互斥的场景依次循环判断\r\n                    for (const mSceneCode of scene.mutexScene.split(';')) {\r\n                        // 判断选择的场景是不是该场景的与互斥场景\r\n                        for (const oScene of this.selectedData) {\r\n                            if (mSceneCode === oScene.sceneCode) {\r\n                                this.$Message.warning({\r\n                                    content: `${scene.sceneName}不能与${oScene.sceneName}同时选择，否则无法创建！`,\r\n                                    duration: 10,\r\n                                    closable: true\r\n                                })\r\n                                return\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // 共生场景\r\n                if (scene.symbiosisScene) {\r\n                    // 所有共生的场景依次循环判断\r\n                    for (const sSceneCode of scene.symbiosisScene.split(';')) {\r\n                        let hasSymbiosisScene = false\r\n                        // 判断选择的场景是不是该场景的与共生场景\r\n                        for (const oScene of this.selectedData) {\r\n                            // 选择了共生的场景\r\n                            if (sSceneCode === oScene.sceneCode) {\r\n                                hasSymbiosisScene = true\r\n                            }\r\n                        }\r\n                        if (!hasSymbiosisScene) {\r\n                            // 获取共生场景的场景名称（后端只返回了sceneCode）\r\n                            let symbiosisSceneName = ''\r\n                            for (const symbiosisScene of this.sceneTableData) {\r\n                                if (sSceneCode === symbiosisScene.sceneCode) {\r\n                                    symbiosisSceneName = symbiosisScene.sceneName\r\n                                    break\r\n                                }\r\n                            }\r\n                            this.$Message.warning({\r\n                                content: `${scene.sceneName}必须要选择${symbiosisSceneName}，否则无法创建！`,\r\n                                duration: 10,\r\n                                closable: true\r\n                            })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n                // 组装后端需要的格式\r\n                const { sceneName, sceneCode, sort } = scene\r\n                sceneNames.push(sceneName)\r\n                scenesList.push({\r\n                    sceneName,\r\n                    sceneCode,\r\n                    sort,\r\n                    taskBasesList: {},\r\n                    taskAffixesList: []\r\n                })\r\n            }\r\n            this.$set(this.productAllInfo[this.curProductIndex], 'scenesList', scenesList)\r\n            this.$set(this.productAllInfo[this.curProductIndex], 'sceneNames', sceneNames)\r\n            this.$set(this.productAllInfo[this.curProductIndex], 'sceneTabIndex', -1)\r\n            this.curSceneName = ''\r\n            this.isSceneModalShow = false\r\n        },\r\n        // 切换场景\r\n        handleSceneBtn (index, sceneName, productIndex) {\r\n            this.$set(this.productAllInfo[productIndex], 'sceneTabIndex', index + 1)\r\n            this.curSceneName = sceneName\r\n            this.curProductIndex = productIndex\r\n            // 点击的场景信息\r\n            const scenesList = this.productAllInfo[productIndex].scenesList[index]\r\n            // 如果已经获取过该场景下的任务，就不再次获取该场景下的任务\r\n            if (scenesList.taskBasesList.lists) {\r\n                return\r\n            }\r\n            // 获取场景下的任务\r\n            apiQueryTaskBySceneCode({ sceneCode: scenesList.sceneCode }).then(({ data }) => {\r\n                // 将获取到的任务放到对应的场景\r\n                scenesList.taskBasesList.lists = []\r\n                scenesList.taskAffixesList = []\r\n                for (const baseTask of data.baseTaskQueryRes) {\r\n                    scenesList.taskBasesList.lists.push({\r\n                        taskCode: baseTask.taskCode,\r\n                        taskName: baseTask.taskName\r\n                    })\r\n                }\r\n                for (const affixTask of data.affixTaskQueryRes) {\r\n                    scenesList.taskAffixesList.push({\r\n                        taskCode: affixTask.taskCode,\r\n                        taskName: affixTask.taskName,\r\n                        isChecked: false\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        // 选择产品（用于删除）\r\n        chooseProduct (code, status) {\r\n            // 选中\r\n            if (status) {\r\n                this.selectList.push(code)\r\n            } else {\r\n                // 取消选中\r\n                const index = this.selectList.indexOf(code)\r\n                this.selectList.splice(index, 1)\r\n            }\r\n        },\r\n        // 选择服务产品类型\r\n        // 跳转到对应的新增页面\r\n        goToAddProduct (val) {\r\n            let type = ''\r\n            switch (val) {\r\n            case 'T':\r\n                type = 'transport'\r\n                break\r\n            case 'Y':\r\n                type = 'site'\r\n                break\r\n            case 'C':\r\n                type = 'customs'\r\n                break\r\n            case 'B':\r\n                type = 'cpa'\r\n                break\r\n            }\r\n            this.$router.push(`/product-editor/add-${type}-product`)\r\n        },\r\n        // 根据城市获取场所\r\n        _handelDir (val) {\r\n            return new Promise(resolve => {\r\n                const code = val[val.length - 1]\r\n                apiChangJing({ city: code }).then(({ data }) => {\r\n                    const arr = (data && data.length) ? data[0] : []\r\n                    const newArr = arr.map(item => {\r\n                        return {\r\n                            value: item.sttnCode,\r\n                            label: item.sttnName\r\n                        }\r\n                    })\r\n                    resolve(newArr)\r\n                })\r\n            })\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}